{"version":3,"sources":["i18n.js","encountermarker.js","kobindings.js","pokedata.js","app.js","sessionloader.js","log.js","navigation.js","pokemon.js","inventory.js"],"names":["tr","phrase","console","log","window","i18n","getTranslatedPhrase","ftr","args","vsprintf","EncounterMarker","latlng","map","this","setMap","phraseId","toLowerCase","loadedPhrases","ko","observable","err","setLanguage","langId","selectedLang","$","getJSON","phrases","hasOwnProperty","vm","prototype","google","maps","OverlayView","draw","self","div","document","createElement","innerdiv","d","i","addClass","css","position","width","height","border-radius","border","background-color","z-index","PokemonId","background-image","background-size","background-position","background-repeat","margin","append","dataset","marker_id","panes","getPanes","overlayImage","appendChild","point","getProjection","fromLatLngToDivPixel","style","left","x","top","y","remove","parentNode","removeChild","getPosition","bindingHandlers","matInput","update","element","valueAccessor","allBindings","boundValue","Materialize","updateTextFields","subscribe","tooltip","init","value","unwrap","attr","tooltipster","theme","side","delay","pokedata","inventory","0","1","2","3","4","101","102","103","104","201","202","301","401","402","403","404","501","602","603","604","701","702","703","705","801","901","902","1001","1002","pokemon","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","704","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","nurx","registerPanel","panelName","panelFactory","panels","createInstance","wsUrl","wsUser","wsPass","connectionText","connectSocketServer","key","instancePanels","support","alert","ws","WebSocket","onmessage","handleMessage","onopen","isConnected","wsConnectTries","setTimeout","sendCommand","pokestopInterval","setInterval","onclose","regainConnection","checkSSL","triggerReconnect","timeout","uSplit","split","url","port","parseInt","testws","SSLCheckUrl","openModal","defaultModalOptions","command","data","cmd","Command","Data","send","JSON","stringify","evt","message","parse","MessageType","commandListeners","profileData","statsData","instanceId","Math","floor","random","selectedPane","showLog","nurxInstance","credentials","instances","push","resizeWindow","w","innerWidth","h","innerHeight","openPanel","fadeIn","currentInstance","closePanel","fadeOut","removeClass","triggerReconnectAll","utils","arrayForEach","instance","showNewInstanceDialog","newInstUrl","DEFAULT_SERVICE_PORT","newInstUser","newInstPass","createNewInstanceTab","selectedInstanceIdx","length","closeNewInstanceModal","closeModal","showCloseInstanceModal","closeModalInstanceId","closeInstance","splice","closeCloseInstanceModal","ready","complete","observableArray","computed","resize","applyBindings","leanModal","sessionData","localStorage","getItem","session","sessionSave","setItem","logMessage","Message","Level","maxLogLevel","logLevels","find","scrollHeight","scrollTop","mapOptions","zoom","center","LatLng","mapTypeId","MapTypeId","ROADMAP","styles","mapStyle","mapTypeControl","scaleControl","zoomControl","Map","getElementById","playerMarker","Marker","icon","zIndex","updateLocation","pos","Lat","Lng","setCenter","setPosition","locationHistory","lat","lng","LOCATION_HISTORY_MAX_POINTS","locationLine","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","loadPokestops","fortMarkers","item","fortData","fortMarker","Latitude","Longitude","fortUsed","matchFort","fortPos","equals","setIcon","showEncounter","encounter","pokeMarker","PokemonData","encounterMarkers","encounterNearby","SpawnId","SpawnPointId","EncounterId","encounterLure","encounterIncense","featureType","elementType","stylers","visibility","lightness","color","loadPokemonList","pokemonListData","sortBy","field","pokemonSortField","sortAscending","pokemonListSorted","clonedData","containsNullPoke","compLHS","compRHS","sort","a","b","Perfection","Base","sortFieldDescription","loadInventoryList","inventoryListData","items"],"mappings":"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SAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,QAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,WAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,YAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,QAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,YAAAC,IAAA,UAAAC,IAAA,QAAAC,IAAA,UAAAC,IAAA,YAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,YAAAC,IAAA,WAAAC,IAAA,SAAAC,IAAA,YAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,UAAAC,IAAA,SAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,YAAAC,IAAA,SAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,SAAAC,IAAA,WAAAC,IAAA,YAAAC,IAAA,SAAAC,IAAA,UAAAtZ,IAAA,YAAAC,IAAA,aAAAC,IAAA,QAAAC,IAAA,QAAAoZ,IAAA,SAAAC,IAAA,QAAAC,IAAA,WAAAC,IAAA,WAAAC,IAAA,YAAAC,IAAA,WAAAC,IAAA,YAAAC,IAAA,QAAAC,IAAA,WAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,YAAAC,IAAA,YAAAC,IAAA,SAAAC,IAAA,WAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,UAAAC,IAAA,YAAAC,IAAA,UAAAC,IAAA,WAAAC,IAAA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","file":"nurx.min.js","sourcesContent":["window.i18n = (function() {\r\n    var selectedLang = \"en-us\";\r\n    var loadedPhrases = {};\r\n\r\n    /**\r\n     * Get a thranslated phrase.\r\n     */\r\n    function getTranslatedPhrase(phrase) {\r\n        try {\r\n            var phraseId = phrase.toLowerCase();\r\n\r\n            if(phraseId in loadedPhrases)\r\n                return loadedPhrases[phraseId];\r\n\r\n            loadedPhrases[phraseId] = ko.observable(phrase);    \r\n            return loadedPhrases[phraseId]\r\n        } catch(err) {\r\n            console.log(\"Error getting translation for phrase:\", phrase);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Set the language by loading the i18n/*.json file.\r\n     */\r\n    function setLanguage(langId) {\r\n        selectedLang = langId;\r\n        console.log(\"Loading language: \", langId);\r\n\r\n        $.getJSON(\"i18n/\" + langId + \".json\", function(phrases) {\r\n            console.log(\"Language data for \" + langId + \":\", phrases);\r\n\r\n            // Iterate over all phrases from the json.\r\n            for (var phraseId in phrases) {\r\n                if (phrases.hasOwnProperty(phraseId)) {\r\n                    \r\n                    // Either set it, or add it into the loaded phrases object.\r\n                    if(phraseId in loadedPhrases)\r\n                        loadedPhrases[phraseId](phrases[phraseId]);\r\n                    else\r\n                        loadedPhrases[phraseId] = ko.observable(phrases[phraseId]);\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initialize i18n.\r\n    setLanguage(selectedLang);\r\n\r\n    // Return module.\r\n    var vm = {\r\n        getTranslatedPhrase: getTranslatedPhrase,\r\n        setLanguage: setLanguage,\r\n        loadedPhrases: loadedPhrases\r\n    }\r\n    return vm;\r\n})();\r\n\r\n// Global translation function.\r\nfunction tr(phrase) {\r\n    if(phrase == null) {\r\n        console.log(\"Error: can't translate a null phrase.\");\r\n        return '';\r\n    }\r\n    \r\n    return window.i18n.getTranslatedPhrase(phrase);\r\n}\r\n\r\nfunction ftr(phrase, args) {\r\n    if(phrase == null) {\r\n        console.log(\"Error: can't translate a null phrase.\");\r\n        return '';\r\n    }\r\n\r\n    return vsprintf(tr(phrase)(), args);\r\n}","function EncounterMarker(latlng, map, args) {\r\n\tthis.latlng = latlng;\t\r\n\tthis.args = args;\t\r\n\tthis.setMap(map);\t\r\n}\r\n\r\nEncounterMarker.prototype = new google.maps.OverlayView();\r\n\r\nEncounterMarker.prototype.draw = function() {\r\n\t\r\n\tvar self = this;\r\n\t\r\n\tvar div = this.div;\r\n\t\r\n\tif (!div) {\r\n\t\r\n\t\tdiv = this.div = document.createElement('div');\r\n\t\tvar innerdiv = document.createElement('div');\r\n\t\t\r\n\t\tvar d = $(div);\r\n\t\tvar i = $(innerdiv);\r\n\r\n\t\td.addClass('marker');\r\n\t\td.css({\t\t\t\r\n\t\t\t'position': \"absolute\",\r\n\t\t\t'width': \"60px\",\r\n\t\t\t'height': \"60px\",\r\n\t\t\t'border-radius': '30px',\r\n\t\t\t'border': '4px solid rgba(61, 134, 165, 0.5)',\r\n\t\t\t'background-color': 'rgba(255, 255, 255, 0.75)',\r\n\t\t\t'z-index': \"90\"\r\n\t\t})\t\r\n\r\n\t\tif(self.args.PokemonId !== 'undefined')\r\n\t\t\ti.css({'background-image': \"url(img/pokemon/\" + self.args.PokemonId + \".png)\"});\r\n\r\n\t\ti.css({\r\n\t\t\t'background-size': \"contain\",\r\n\t\t\t'background-position': \"center center\",\r\n\t\t\t'background-repeat': 'no-repeat',\r\n\t\t\t'width': \"40px\",\r\n\t\t\t'height': \"40px\",\r\n\t\t\t'border-radius': '20px',\r\n\t\t\t'margin': \"5px\"\r\n\t\t})\r\n\r\n\t\td.append(i);\r\n\t\t\t\r\n\t\tif (typeof(self.args.marker_id) !== 'undefined') {\r\n\t\t\tdiv.dataset.marker_id = self.args.marker_id;\r\n\t\t}\r\n\t\t\r\n\t\t/*google.maps.event.addDomListener(div, \"click\", function(event) {\r\n\t\t\talert('You clicked on a custom marker!');\t\t\t\r\n\t\t\tgoogle.maps.event.trigger(self, \"click\");\r\n\t\t});*/\r\n\t\t\r\n\t\tvar panes = this.getPanes();\r\n\t\tpanes.overlayImage.appendChild(div);\r\n\t}\r\n\t\r\n\tvar point = this.getProjection().fromLatLngToDivPixel(this.latlng);\r\n\t\r\n\tif (point) {\r\n\t\tdiv.style.left = (point.x - 10) + 'px';\r\n\t\tdiv.style.top = (point.y - 20) + 'px';\r\n\t}\r\n};\r\n\r\nEncounterMarker.prototype.remove = function() {\r\n\tif (this.div) {\r\n\t\tthis.div.parentNode.removeChild(this.div);\r\n\t\tthis.div = null;\r\n\t}\t\r\n};\r\n\r\nEncounterMarker.prototype.getPosition = function() {\r\n\treturn this.latlng;\t\r\n};","ko.bindingHandlers.matInput = {\r\n    update: function(element, valueAccessor, allBindings) {\r\n        // Find the \"options\" sub-binding:\r\n        var boundValue = valueAccessor();\r\n        Materialize.updateTextFields();\r\n        \r\n        // Register a callback for when \"options\" changes:\r\n        boundValue.subscribe(function() {\r\n            Materialize.updateTextFields();\r\n        });\r\n    }\r\n};\r\n\r\nko.bindingHandlers.tooltip = {\r\n    init: function(element, valueAccessor) {\r\n        var value = ko.unwrap(valueAccessor());\r\n        $(element).attr(\"title\", value);\r\n        $(element).tooltipster({\r\n            theme: 'tooltipster-borderless',\r\n            side: 'right',\r\n            delay: [3000, 0]\r\n        });\r\n    },\r\n    update: function(element, valueAccessor, allBindings) {\r\n        var value = ko.unwrap(valueAccessor());\r\n\r\n        $(element).tooltipster(\"destroy\");\r\n        $(element).attr(\"title\", value);\r\n        $(element).tooltipster({\r\n            theme: 'tooltipster-borderless',\r\n            side: 'right',\r\n            delay: [3000, 0]\r\n        });\r\n    }\r\n}","window.pokedata = {\r\n    inventory: {\r\n        \"0\": \"Unknown\",\r\n        \"1\": \"Poke ball\",\r\n        \"2\": \"Great Ball\",\r\n        \"3\": \"Ultra Ball\",\r\n        \"4\": \"Master Ball\",\r\n        \"101\": \"Potion\",\r\n        \"102\": \"Super Potion\",\r\n        \"103\": \"Hyper Potion\",\r\n        \"104\": \"Max Potion\",\r\n        \"201\": \"Revive\",\r\n        \"202\": \"Max Revive\",\r\n        \"301\": \"Lucky Egg\",\r\n        \"401\": \"Incense\",\r\n        \"402\": \"Incense Spicy\",\r\n        \"403\": \"Incense Cool\",\r\n        \"404\": \"Incense Floral\",\r\n        \"501\": \"Lure Module\",\r\n        \"602\": \"X Attack\",\r\n        \"603\": \"X Defense\",\r\n        \"604\": \"X Miracle\",\r\n        \"701\": \"Razberry\",\r\n        \"702\": \"Blukberry\",\r\n        \"703\": \"Weparberry\",\r\n        \"705\": \"Pinapberry\",\r\n        \"801\": \"Camera\",\r\n        \"901\": \"Incubator ∞\",\r\n        \"902\": \"Incubator\",\r\n        \"1001\": \"Pokemon Storage Upgrade\",\r\n        \"1002\": \"Item Storage Upgrade\"\r\n    },\r\n    pokemon: {\"1\":\"Bulbasaur\",\"2\":\"Ivysaur\",\"3\":\"Venusaur\",\"4\":\"Charmander\",\"5\":\"Charmeleon\",\"6\":\"Charizard\",\"7\":\"Squirtle\",\"8\":\"Wartortle\",\"9\":\"Blastoise\",\"10\":\"Caterpie\",\"11\":\"Metapod\",\"12\":\"Butterfree\",\"13\":\"Weedle\",\"14\":\"Kakuna\",\"15\":\"Beedrill\",\"16\":\"Pidgey\",\"17\":\"Pidgeotto\",\"18\":\"Pidgeot\",\"19\":\"Rattata\",\"20\":\"Raticate\",\"21\":\"Spearow\",\"22\":\"Fearow\",\"23\":\"Ekans\",\"24\":\"Arbok\",\"25\":\"Pikachu\",\"26\":\"Raichu\",\"27\":\"Sandshrew\",\"28\":\"Sandslash\",\"29\":\"Nidoran♀\",\"30\":\"Nidorina\",\"31\":\"Nidoqueen\",\"32\":\"Nidoran♂\",\"33\":\"Nidorino\",\"34\":\"Nidoking\",\"35\":\"Clefairy\",\"36\":\"Clefable\",\"37\":\"Vulpix\",\"38\":\"Ninetales\",\"39\":\"Jigglypuff\",\"40\":\"Wigglytuff\",\"41\":\"Zubat\",\"42\":\"Golbat\",\"43\":\"Oddish\",\"44\":\"Gloom\",\"45\":\"Vileplume\",\"46\":\"Paras\",\"47\":\"Parasect\",\"48\":\"Venonat\",\"49\":\"Venomoth\",\"50\":\"Diglett\",\"51\":\"Dugtrio\",\"52\":\"Meowth\",\"53\":\"Persian\",\"54\":\"Psyduck\",\"55\":\"Golduck\",\"56\":\"Mankey\",\"57\":\"Primeape\",\"58\":\"Growlithe\",\"59\":\"Arcanine\",\"60\":\"Poliwag\",\"61\":\"Poliwhirl\",\"62\":\"Poliwrath\",\"63\":\"Abra\",\"64\":\"Kadabra\",\"65\":\"Alakazam\",\"66\":\"Machop\",\"67\":\"Machoke\",\"68\":\"Machamp\",\"69\":\"Bellsprout\",\"70\":\"Weepinbell\",\"71\":\"Victreebel\",\"72\":\"Tentacool\",\"73\":\"Tentacruel\",\"74\":\"Geodude\",\"75\":\"Graveler\",\"76\":\"Golem\",\"77\":\"Ponyta\",\"78\":\"Rapidash\",\"79\":\"Slowpoke\",\"80\":\"Slowbro\",\"81\":\"Magnemite\",\"82\":\"Magneton\",\"83\":\"Farfetch'd\",\"84\":\"Doduo\",\"85\":\"Dodrio\",\"86\":\"Seel\",\"87\":\"Dewgong\",\"88\":\"Grimer\",\"89\":\"Muk\",\"90\":\"Shellder\",\"91\":\"Cloyster\",\"92\":\"Gastly\",\"93\":\"Haunter\",\"94\":\"Gengar\",\"95\":\"Onix\",\"96\":\"Drowzee\",\"97\":\"Hypno\",\"98\":\"Krabby\",\"99\":\"Kingler\",\"100\":\"Voltorb\",\"101\":\"Electrode\",\"102\":\"Exeggcute\",\"103\":\"Exeggutor\",\"104\":\"Cubone\",\"105\":\"Marowak\",\"106\":\"Hitmonlee\",\"107\":\"Hitmonchan\",\"108\":\"Lickitung\",\"109\":\"Koffing\",\"110\":\"Weezing\",\"111\":\"Rhyhorn\",\"112\":\"Rhydon\",\"113\":\"Chansey\",\"114\":\"Tangela\",\"115\":\"Kangaskhan\",\"116\":\"Horsea\",\"117\":\"Seadra\",\"118\":\"Goldeen\",\"119\":\"Seaking\",\"120\":\"Staryu\",\"121\":\"Starmie\",\"122\":\"Mr. Mime\",\"123\":\"Scyther\",\"124\":\"Jynx\",\"125\":\"Electabuzz\",\"126\":\"Magmar\",\"127\":\"Pinsir\",\"128\":\"Tauros\",\"129\":\"Magikarp\",\"130\":\"Gyarados\",\"131\":\"Lapras\",\"132\":\"Ditto\",\"133\":\"Eevee\",\"134\":\"Vaporeon\",\"135\":\"Jolteon\",\"136\":\"Flareon\",\"137\":\"Porygon\",\"138\":\"Omanyte\",\"139\":\"Omastar\",\"140\":\"Kabuto\",\"141\":\"Kabutops\",\"142\":\"Aerodactyl\",\"143\":\"Snorlax\",\"144\":\"Articuno\",\"145\":\"Zapdos\",\"146\":\"Moltres\",\"147\":\"Dratini\",\"148\":\"Dragonair\",\"149\":\"Dragonite\",\"150\":\"Mewtwo\",\"151\":\"Mew\",\"152\":\"Chikorita\",\"153\":\"Bayleef\",\"154\":\"Meganium\",\"155\":\"Cyndaquil\",\"156\":\"Quilava\",\"157\":\"Typhlosion\",\"158\":\"Totodile\",\"159\":\"Croconaw\",\"160\":\"Feraligatr\",\"161\":\"Sentret\",\"162\":\"Furret\",\"163\":\"Hoothoot\",\"164\":\"Noctowl\",\"165\":\"Ledyba\",\"166\":\"Ledian\",\"167\":\"Spinarak\",\"168\":\"Ariados\",\"169\":\"Crobat\",\"170\":\"Chinchou\",\"171\":\"Lanturn\",\"172\":\"Pichu\",\"173\":\"Cleffa\",\"174\":\"Igglybuff\",\"175\":\"Togepi\",\"176\":\"Togetic\",\"177\":\"Natu\",\"178\":\"Xatu\",\"179\":\"Mareep\",\"180\":\"Flaaffy\",\"181\":\"Ampharos\",\"182\":\"Bellossom\",\"183\":\"Marill\",\"184\":\"Azumarill\",\"185\":\"Sudowoodo\",\"186\":\"Politoed\",\"187\":\"Hoppip\",\"188\":\"Skiploom\",\"189\":\"Jumpluff\",\"190\":\"Aipom\",\"191\":\"Sunkern\",\"192\":\"Sunflora\",\"193\":\"Yanma\",\"194\":\"Wooper\",\"195\":\"Quagsire\",\"196\":\"Espeon\",\"197\":\"Umbreon\",\"198\":\"Murkrow\",\"199\":\"Slowking\",\"200\":\"Misdreavus\",\"201\":\"Unown\",\"202\":\"Wobbuffet\",\"203\":\"Girafarig\",\"204\":\"Pineco\",\"205\":\"Forretress\",\"206\":\"Dunsparce\",\"207\":\"Gligar\",\"208\":\"Steelix\",\"209\":\"Snubbull\",\"210\":\"Granbull\",\"211\":\"Qwilfish\",\"212\":\"Scizor\",\"213\":\"Shuckle\",\"214\":\"Heracross\",\"215\":\"Sneasel\",\"216\":\"Teddiursa\",\"217\":\"Ursaring\",\"218\":\"Slugma\",\"219\":\"Magcargo\",\"220\":\"Swinub\",\"221\":\"Piloswine\",\"222\":\"Corsola\",\"223\":\"Remoraid\",\"224\":\"Octillery\",\"225\":\"Delibird\",\"226\":\"Mantine\",\"227\":\"Skarmory\",\"228\":\"Houndour\",\"229\":\"Houndoom\",\"230\":\"Kingdra\",\"231\":\"Phanpy\",\"232\":\"Donphan\",\"233\":\"Porygon2\",\"234\":\"Stantler\",\"235\":\"Smeargle\",\"236\":\"Tyrogue\",\"237\":\"Hitmontop\",\"238\":\"Smoochum\",\"239\":\"Elekid\",\"240\":\"Magby\",\"241\":\"Miltank\",\"242\":\"Blissey\",\"243\":\"Raikou\",\"244\":\"Entei\",\"245\":\"Suicune\",\"246\":\"Larvitar\",\"247\":\"Pupitar\",\"248\":\"Tyranitar\",\"249\":\"Lugia\",\"250\":\"Ho-Oh\",\"251\":\"Celebi\",\"252\":\"Treecko\",\"253\":\"Grovyle\",\"254\":\"Sceptile\",\"255\":\"Torchic\",\"256\":\"Combusken\",\"257\":\"Blaziken\",\"258\":\"Mudkip\",\"259\":\"Marshtomp\",\"260\":\"Swampert\",\"261\":\"Poochyena\",\"262\":\"Mightyena\",\"263\":\"Zigzagoon\",\"264\":\"Linoone\",\"265\":\"Wurmple\",\"266\":\"Silcoon\",\"267\":\"Beautifly\",\"268\":\"Cascoon\",\"269\":\"Dustox\",\"270\":\"Lotad\",\"271\":\"Lombre\",\"272\":\"Ludicolo\",\"273\":\"Seedot\",\"274\":\"Nuzleaf\",\"275\":\"Shiftry\",\"276\":\"Taillow\",\"277\":\"Swellow\",\"278\":\"Wingull\",\"279\":\"Pelipper\",\"280\":\"Ralts\",\"281\":\"Kirlia\",\"282\":\"Gardevoir\",\"283\":\"Surskit\",\"284\":\"Masquerain\",\"285\":\"Shroomish\",\"286\":\"Breloom\",\"287\":\"Slakoth\",\"288\":\"Vigoroth\",\"289\":\"Slaking\",\"290\":\"Nincada\",\"291\":\"Ninjask\",\"292\":\"Shedinja\",\"293\":\"Whismur\",\"294\":\"Loudred\",\"295\":\"Exploud\",\"296\":\"Makuhita\",\"297\":\"Hariyama\",\"298\":\"Azurill\",\"299\":\"Nosepass\",\"300\":\"Skitty\",\"301\":\"Delcatty\",\"302\":\"Sableye\",\"303\":\"Mawile\",\"304\":\"Aron\",\"305\":\"Lairon\",\"306\":\"Aggron\",\"307\":\"Meditite\",\"308\":\"Medicham\",\"309\":\"Electrike\",\"310\":\"Manectric\",\"311\":\"Plusle\",\"312\":\"Minun\",\"313\":\"Volbeat\",\"314\":\"Illumise\",\"315\":\"Roselia\",\"316\":\"Gulpin\",\"317\":\"Swalot\",\"318\":\"Carvanha\",\"319\":\"Sharpedo\",\"320\":\"Wailmer\",\"321\":\"Wailord\",\"322\":\"Numel\",\"323\":\"Camerupt\",\"324\":\"Torkoal\",\"325\":\"Spoink\",\"326\":\"Grumpig\",\"327\":\"Spinda\",\"328\":\"Trapinch\",\"329\":\"Vibrava\",\"330\":\"Flygon\",\"331\":\"Cacnea\",\"332\":\"Cacturne\",\"333\":\"Swablu\",\"334\":\"Altaria\",\"335\":\"Zangoose\",\"336\":\"Seviper\",\"337\":\"Lunatone\",\"338\":\"Solrock\",\"339\":\"Barboach\",\"340\":\"Whiscash\",\"341\":\"Corphish\",\"342\":\"Crawdaunt\",\"343\":\"Baltoy\",\"344\":\"Claydol\",\"345\":\"Lileep\",\"346\":\"Cradily\",\"347\":\"Anorith\",\"348\":\"Armaldo\",\"349\":\"Feebas\",\"350\":\"Milotic\",\"351\":\"Castform\",\"352\":\"Kecleon\",\"353\":\"Shuppet\",\"354\":\"Banette\",\"355\":\"Duskull\",\"356\":\"Dusclops\",\"357\":\"Tropius\",\"358\":\"Chimecho\",\"359\":\"Absol\",\"360\":\"Wynaut\",\"361\":\"Snorunt\",\"362\":\"Glalie\",\"363\":\"Spheal\",\"364\":\"Sealeo\",\"365\":\"Walrein\",\"366\":\"Clamperl\",\"367\":\"Huntail\",\"368\":\"Gorebyss\",\"369\":\"Relicanth\",\"370\":\"Luvdisc\",\"371\":\"Bagon\",\"372\":\"Shelgon\",\"373\":\"Salamence\",\"374\":\"Beldum\",\"375\":\"Metang\",\"376\":\"Metagross\",\"377\":\"Regirock\",\"378\":\"Regice\",\"379\":\"Registeel\",\"380\":\"Latias\",\"381\":\"Latios\",\"382\":\"Kyogre\",\"383\":\"Groudon\",\"384\":\"Rayquaza\",\"385\":\"Jirachi\",\"386\":\"Deoxys\",\"387\":\"Turtwig\",\"388\":\"Grotle\",\"389\":\"Torterra\",\"390\":\"Chimchar\",\"391\":\"Monferno\",\"392\":\"Infernape\",\"393\":\"Piplup\",\"394\":\"Prinplup\",\"395\":\"Empoleon\",\"396\":\"Starly\",\"397\":\"Staravia\",\"398\":\"Staraptor\",\"399\":\"Bidoof\",\"400\":\"Bibarel\",\"401\":\"Kricketot\",\"402\":\"Kricketune\",\"403\":\"Shinx\",\"404\":\"Luxio\",\"405\":\"Luxray\",\"406\":\"Budew\",\"407\":\"Roserade\",\"408\":\"Cranidos\",\"409\":\"Rampardos\",\"410\":\"Shieldon\",\"411\":\"Bastiodon\",\"412\":\"Burmy\",\"413\":\"Wormadam\",\"414\":\"Mothim\",\"415\":\"Combee\",\"416\":\"Vespiquen\",\"417\":\"Pachirisu\",\"418\":\"Buizel\",\"419\":\"Floatzel\",\"420\":\"Cherubi\",\"421\":\"Cherrim\",\"422\":\"Shellos\",\"423\":\"Gastrodon\",\"424\":\"Ambipom\",\"425\":\"Drifloon\",\"426\":\"Drifblim\",\"427\":\"Buneary\",\"428\":\"Lopunny\",\"429\":\"Mismagius\",\"430\":\"Honchkrow\",\"431\":\"Glameow\",\"432\":\"Purugly\",\"433\":\"Chingling\",\"434\":\"Stunky\",\"435\":\"Skuntank\",\"436\":\"Bronzor\",\"437\":\"Bronzong\",\"438\":\"Bonsly\",\"439\":\"Mime Jr.\",\"440\":\"Happiny\",\"441\":\"Chatot\",\"442\":\"Spiritomb\",\"443\":\"Gible\",\"444\":\"Gabite\",\"445\":\"Garchomp\",\"446\":\"Munchlax\",\"447\":\"Riolu\",\"448\":\"Lucario\",\"449\":\"Hippopotas\",\"450\":\"Hippowdon\",\"451\":\"Skorupi\",\"452\":\"Drapion\",\"453\":\"Croagunk\",\"454\":\"Toxicroak\",\"455\":\"Carnivine\",\"456\":\"Finneon\",\"457\":\"Lumineon\",\"458\":\"Mantyke\",\"459\":\"Snover\",\"460\":\"Abomasnow\",\"461\":\"Weavile\",\"462\":\"Magnezone\",\"463\":\"Lickilicky\",\"464\":\"Rhyperior\",\"465\":\"Tangrowth\",\"466\":\"Electivire\",\"467\":\"Magmortar\",\"468\":\"Togekiss\",\"469\":\"Yanmega\",\"470\":\"Leafeon\",\"471\":\"Glaceon\",\"472\":\"Gliscor\",\"473\":\"Mamoswine\",\"474\":\"Porygon-Z\",\"475\":\"Gallade\",\"476\":\"Probopass\",\"477\":\"Dusknoir\",\"478\":\"Froslass\",\"479\":\"Rotom\",\"480\":\"Uxie\",\"481\":\"Mesprit\",\"482\":\"Azelf\",\"483\":\"Dialga\",\"484\":\"Palkia\",\"485\":\"Heatran\",\"486\":\"Regigigas\",\"487\":\"Giratina\",\"488\":\"Cresselia\",\"489\":\"Phione\",\"490\":\"Manaphy\",\"491\":\"Darkrai\",\"492\":\"Shaymin\",\"493\":\"Arceus\",\"494\":\"Victini\",\"495\":\"Snivy\",\"496\":\"Servine\",\"497\":\"Serperior\",\"498\":\"Tepig\",\"499\":\"Pignite\",\"500\":\"Emboar\",\"501\":\"Oshawott\",\"502\":\"Dewott\",\"503\":\"Samurott\",\"504\":\"Patrat\",\"505\":\"Watchog\",\"506\":\"Lillipup\",\"507\":\"Herdier\",\"508\":\"Stoutland\",\"509\":\"Purrloin\",\"510\":\"Liepard\",\"511\":\"Pansage\",\"512\":\"Simisage\",\"513\":\"Pansear\",\"514\":\"Simisear\",\"515\":\"Panpour\",\"516\":\"Simipour\",\"517\":\"Munna\",\"518\":\"Musharna\",\"519\":\"Pidove\",\"520\":\"Tranquill\",\"521\":\"Unfezant\",\"522\":\"Blitzle\",\"523\":\"Zebstrika\",\"524\":\"Roggenrola\",\"525\":\"Boldore\",\"526\":\"Gigalith\",\"527\":\"Woobat\",\"528\":\"Swoobat\",\"529\":\"Drilbur\",\"530\":\"Excadrill\",\"531\":\"Audino\",\"532\":\"Timburr\",\"533\":\"Gurdurr\",\"534\":\"Conkeldurr\",\"535\":\"Tympole\",\"536\":\"Palpitoad\",\"537\":\"Seismitoad\",\"538\":\"Throh\",\"539\":\"Sawk\",\"540\":\"Sewaddle\",\"541\":\"Swadloon\",\"542\":\"Leavanny\",\"543\":\"Venipede\",\"544\":\"Whirlipede\",\"545\":\"Scolipede\",\"546\":\"Cottonee\",\"547\":\"Whimsicott\",\"548\":\"Petilil\",\"549\":\"Lilligant\",\"550\":\"Basculin\",\"551\":\"Sandile\",\"552\":\"Krokorok\",\"553\":\"Krookodile\",\"554\":\"Darumaka\",\"555\":\"Darmanitan\",\"556\":\"Maractus\",\"557\":\"Dwebble\",\"558\":\"Crustle\",\"559\":\"Scraggy\",\"560\":\"Scrafty\",\"561\":\"Sigilyph\",\"562\":\"Yamask\",\"563\":\"Cofagrigus\",\"564\":\"Tirtouga\",\"565\":\"Carracosta\",\"566\":\"Archen\",\"567\":\"Archeops\",\"568\":\"Trubbish\",\"569\":\"Garbodor\",\"570\":\"Zorua\",\"571\":\"Zoroark\",\"572\":\"Minccino\",\"573\":\"Cinccino\",\"574\":\"Gothita\",\"575\":\"Gothorita\",\"576\":\"Gothitelle\",\"577\":\"Solosis\",\"578\":\"Duosion\",\"579\":\"Reuniclus\",\"580\":\"Ducklett\",\"581\":\"Swanna\",\"582\":\"Vanillite\",\"583\":\"Vanillish\",\"584\":\"Vanilluxe\",\"585\":\"Deerling\",\"586\":\"Sawsbuck\",\"587\":\"Emolga\",\"588\":\"Karrablast\",\"589\":\"Escavalier\",\"590\":\"Foongus\",\"591\":\"Amoonguss\",\"592\":\"Frillish\",\"593\":\"Jellicent\",\"594\":\"Alomomola\",\"595\":\"Joltik\",\"596\":\"Galvantula\",\"597\":\"Ferroseed\",\"598\":\"Ferrothorn\",\"599\":\"Klink\",\"600\":\"Klang\",\"601\":\"Klinklang\",\"602\":\"Tynamo\",\"603\":\"Eelektrik\",\"604\":\"Eelektross\",\"605\":\"Elgyem\",\"606\":\"Beheeyem\",\"607\":\"Litwick\",\"608\":\"Lampent\",\"609\":\"Chandelure\",\"610\":\"Axew\",\"611\":\"Fraxure\",\"612\":\"Haxorus\",\"613\":\"Cubchoo\",\"614\":\"Beartic\",\"615\":\"Cryogonal\",\"616\":\"Shelmet\",\"617\":\"Accelgor\",\"618\":\"Stunfisk\",\"619\":\"Mienfoo\",\"620\":\"Mienshao\",\"621\":\"Druddigon\",\"622\":\"Golett\",\"623\":\"Golurk\",\"624\":\"Pawniard\",\"625\":\"Bisharp\",\"626\":\"Bouffalant\",\"627\":\"Rufflet\",\"628\":\"Braviary\",\"629\":\"Vullaby\",\"630\":\"Mandibuzz\",\"631\":\"Heatmor\",\"632\":\"Durant\",\"633\":\"Deino\",\"634\":\"Zweilous\",\"635\":\"Hydreigon\",\"636\":\"Larvesta\",\"637\":\"Volcarona\",\"638\":\"Cobalion\",\"639\":\"Terrakion\",\"640\":\"Virizion\",\"641\":\"Tornadus\",\"642\":\"Thundurus\",\"643\":\"Reshiram\",\"644\":\"Zekrom\",\"645\":\"Landorus\",\"646\":\"Kyurem\",\"647\":\"Keldeo\",\"648\":\"Meloetta\",\"649\":\"Genesect\",\"650\":\"Chespin\",\"651\":\"Quilladin\",\"652\":\"Chesnaught\",\"653\":\"Fennekin\",\"654\":\"Braixen\",\"655\":\"Delphox\",\"656\":\"Froakie\",\"657\":\"Frogadier\",\"658\":\"Greninja\",\"659\":\"Bunnelby\",\"660\":\"Diggersby\",\"661\":\"Fletchling\",\"662\":\"Fletchinder\",\"663\":\"Talonflame\",\"664\":\"Scatterbug\",\"665\":\"Spewpa\",\"666\":\"Vivillon\",\"667\":\"Litleo\",\"668\":\"Pyroar\",\"669\":\"Flabébé\",\"670\":\"Floette\",\"671\":\"Florges\",\"672\":\"Skiddo\",\"673\":\"Gogoat\",\"674\":\"Pancham\",\"675\":\"Pangoro\",\"676\":\"Furfrou\",\"677\":\"Espurr\",\"678\":\"Meowstic\",\"679\":\"Honedge\",\"680\":\"Doublade\",\"681\":\"Aegislash\",\"682\":\"Spritzee\",\"683\":\"Aromatisse\",\"684\":\"Swirlix\",\"685\":\"Slurpuff\",\"686\":\"Inkay\",\"687\":\"Malamar\",\"688\":\"Binacle\",\"689\":\"Barbaracle\",\"690\":\"Skrelp\",\"691\":\"Dragalge\",\"692\":\"Clauncher\",\"693\":\"Clawitzer\",\"694\":\"Helioptile\",\"695\":\"Heliolisk\",\"696\":\"Tyrunt\",\"697\":\"Tyrantrum\",\"698\":\"Amaura\",\"699\":\"Aurorus\",\"700\":\"Sylveon\",\"701\":\"Hawlucha\",\"702\":\"Dedenne\",\"703\":\"Carbink\",\"704\":\"Goomy\",\"705\":\"Sliggoo\",\"706\":\"Goodra\",\"707\":\"Klefki\",\"708\":\"Phantump\",\"709\":\"Trevenant\",\"710\":\"Pumpkaboo\",\"711\":\"Gourgeist\",\"712\":\"Bergmite\",\"713\":\"Avalugg\",\"714\":\"Noibat\",\"715\":\"Noivern\",\"716\":\"Xerneas\",\"717\":\"Yveltal\",\"718\":\"Zygarde\",\"719\":\"Diancie\",\"720\":\"Hoopa\",\"721\":\"Volcanion\"}\r\n};","\r\nwindow.nurx = (function() {\r\n\r\n    var pokedata = window.pokedata;\r\n    var DEFAULT_SERVICE_PORT = 14251;\r\n\r\n    var defaultModalOptions = {\r\n        ready: function() { $('#global').addClass('modal-active'); },\r\n        complete: function() { $('#global').removeClass('modal-active'); }\r\n    };\r\n\r\n    var panels = {};\r\n\r\n    // Observables.\r\n    var instances = ko.observableArray([]);\r\n    var selectedInstanceIdx = ko.observable(-1);\r\n\r\n    var newInstUrl = ko.observable();\r\n    var newInstUser = ko.observable();\r\n    var newInstPass = ko.observable();\r\n\r\n    var SSLCheckUrl = ko.observable();\r\n\r\n    // Computeds\r\n    var currentInstance = ko.computed(function() {\r\n        if(selectedInstanceIdx() >= 0 && instances().length > 0 && selectedInstanceIdx() < instances().length)\r\n            return instances()[selectedInstanceIdx()];\r\n        \r\n        return null;        \r\n    });\r\n    currentInstance.subscribe(function(data) {\r\n        setTimeout(function() { \r\n            $(\".log\").removeClass(\"log-show\");\r\n            $(\"#\" + data.instanceId + \" .log\").addClass(\"log-show\");\r\n        }, 0);\r\n    })\r\n    \r\n    // Functions.\r\n\r\n    /**\r\n     * Register panel to Nurx.\r\n     */\r\n    function registerPanel(panelName, panelFactory) {\r\n        panels[panelName] = panelFactory;\r\n    }\r\n\r\n    /**\r\n     * Create instance.\r\n     */\r\n    function createInstance(wsUrl, wsUser, wsPass) {\r\n        var instanceId = Math.floor((Math.random() * 100000));\r\n        var commandListeners = {};\r\n        var instancePanels = {}\r\n\r\n        var ws;   \r\n        var wsConnectTries = 0;\r\n        var pokestopInterval;\r\n\r\n        // Obserbables.\r\n        var selectedPane = ko.observable(\"navigation\");\r\n        var statsData = ko.observable(null);\r\n        var profileData = ko.observable(null);\r\n        var isConnected = ko.observable(false);\r\n        var connectionText = ko.observable();\r\n        var showLog = ko.observable(false);\r\n\r\n        /**\r\n         * Initalize the frontend.\r\n         */\r\n        function init() { \r\n            // Connect to NecroBot.\r\n            connectionText(\"Connecting...\");\r\n            connectSocketServer();\r\n\r\n            // Initalize all panels.\r\n            for (var key in instancePanels) {\r\n                if (instancePanels.hasOwnProperty(key))\r\n                    instancePanels[key].init();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Setup the websockets connection.\r\n         */\r\n        function connectSocketServer() {\r\n            var support = \"MozWebSocket\" in window ? 'MozWebSocket' : (\"WebSocket\" in window ? 'WebSocket' : null);\r\n\r\n            if (support == null) {\r\n                alert(\"Your browser cannot doesn't websockets. :(\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                ws = new WebSocket('wss://' + wsUrl + '/');        \r\n                ws.onmessage = handleMessage;\r\n\r\n                // when the connection is established, this method is called\r\n                ws.onopen = function () { \r\n                    console.log( \"Server connection opened.\" );\r\n                    isConnected(true);\r\n                    wsConnectTries = 0;\r\n                    \r\n                    // Initial data retrieval.\r\n                    setTimeout(function() {\r\n                        sendCommand(\"location\", {});\r\n                        sendCommand(\"profile\", {});\r\n                        sendCommand(\"pokemonlist\", {});\r\n                        sendCommand(\"pokestops\", {});\r\n                        sendCommand(\"inventorylist\", {});\r\n                    }, 1000);\r\n\r\n                    pokestopInterval = setInterval(function() {\r\n                        sendCommand(\"pokestop\", {}); \r\n                    }, 1000 * 60 * 5);\r\n                }\r\n\r\n                // when the connection is closed, this method is called\r\n                ws.onclose = function () { \r\n                    isConnected(false);\r\n                    console.log( \"Server connection closed.\"); \r\n                    regainConnection();\r\n                    checkSSL();\r\n                }\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reconnect if the instance isnt connected.\r\n         */\r\n        function triggerReconnect() {\r\n            if(!isConnected())\r\n                connectSocketServer();\r\n        }\r\n\r\n        /**\r\n         * Attempt to regain the connection.\r\n         */\r\n        function regainConnection() {\r\n            var timeout;\r\n\r\n            if (wsConnectTries == 0) {\r\n                timeout = 1000;\r\n                connectionText(tr(\"Connection lost<br />reconnecting ...\")());\r\n            } else if (wsConnectTries < 3) {\r\n                timeout = 20000;            // 20 seconds until 3rd try;\r\n                connectionText(tr(\"Connection lost<br />trying again in 20 seconds ...\")());\r\n            } else if (wsConnectTries < 10) {\r\n                timeout = 1000 * 60 * 5;    // 5 minutes until 10th try.\r\n                connectionText(tr(\"Connection lost<br />trying again in 5 minutes  ...\")());\r\n            } else {\r\n                timeout = 1000 * 60 * 20;   // 20 minutes.\r\n                connectionText(tr(\"Connection lost<br />trying again in 20 minutes ...\")());\r\n            }\r\n            \r\n            wsConnectTries++;\r\n            setTimeout(connectSocketServer, timeout);    \r\n        }\r\n\r\n        /**\r\n         * Check to see if perhaps the SSL self signed cert hasnt been accepted.\r\n         */\r\n        function checkSSL() {\r\n            var uSplit = wsUrl.split(\":\");\r\n            var url = uSplit[0];\r\n            var port = parseInt(uSplit[1], 10);\r\n\r\n            var testws = new WebSocket('ws://' + url + ':' + (port + 1) + '/');    \r\n            testws.onopen = function () {\r\n                window.nurx.SSLCheckUrl(\"https://\" + url + \":\" + port + \"/\");\r\n                $('#global').addClass('modal-active');\r\n                $(\"#ssl-check-modal\").openModal(defaultModalOptions);\r\n            } \r\n        }\r\n\r\n        /**\r\n         * Send a websockets command.\r\n         */\r\n        function sendCommand(command, data) {\r\n            var cmd = {\r\n                'Command': command,\r\n                'Data': data \r\n            };\r\n            ws.send(JSON.stringify(cmd));        \r\n        }\r\n\r\n\r\n        /**\r\n         * Websockets callback for handling messages. \r\n         */\r\n        function handleMessage(evt) {\r\n            var message = JSON.parse(evt.data);\r\n            console.log(message);\r\n\r\n            // Pass the message off to any registered command listeners.\r\n            if(message.MessageType in commandListeners) {\r\n                commandListeners[message.MessageType](message);\r\n                return;\r\n            }\r\n            \r\n            // Default commands.\r\n            switch(message.MessageType) {\r\n                case \"profile\":\r\n                    profileData(message.Data);\r\n                    break;\r\n                case \"stats\":                \r\n                    statsData(message.Data);\r\n                    break;\r\n                default:\r\n                    console.log(\"Unknown command: \", message);\r\n                    break;\r\n            }            \r\n        }\r\n\r\n        // Create the instance viewmodel.\r\n        var nurxInstance = {\r\n            // Credentials.\r\n            credentials: {\r\n                wsUrl: wsUrl,\r\n                wsUser: wsUser,\r\n                wsPass: wsPass\r\n            },\r\n\r\n            commandListeners: commandListeners,\r\n            instancePanels: instancePanels,\r\n            instanceId: instanceId,\r\n\r\n            // Obserbables.\r\n            selectedPane: selectedPane,\r\n            statsData: statsData,\r\n            profileData: profileData,\r\n            isConnected: isConnected,\r\n            connectionText: connectionText,\r\n            showLog: showLog,\r\n        \r\n            // Functions.\r\n            init: init,\r\n            sendCommand: sendCommand,\r\n            triggerReconnect: triggerReconnect\r\n        }\r\n\r\n        // For each panel we have, initialize it and inject it into the instance.\r\n        for (var key in panels) {\r\n            if (panels.hasOwnProperty(key)) {\r\n                nurxInstance[key] = panels[key](nurxInstance);\r\n                nurxInstance.instancePanels[key] = nurxInstance[key];\r\n            }\r\n        }\r\n\r\n        // Add the instance to the root viewmodel.\r\n        instances.push(nurxInstance);\r\n        nurxInstance.init();\r\n    }\r\n    \r\n    /**\r\n     * Handle window resizing.\r\n     */\r\n    function resizeWindow() {\r\n        var w = $(window).innerWidth();\r\n        var h = $(window).innerHeight();\r\n\r\n        console.log(\"Resizing...\");\r\n\r\n        $(\".pane-container\").css({\r\n            'height': (h - 40) + \"px\",\r\n            'width': w + 'px'                       \r\n        });\r\n        $(\".pane\").css({\r\n            'height': (h - 40) + \"px\",\r\n            'width': w + 'px'                         \r\n        });        \r\n    }\r\n\r\n\r\n    /**\r\n     * Open a new panel.\r\n     */\r\n    function openPanel(panelName) {\r\n        $(\".panel\").addClass(\"panel-shown\");\r\n        $(\".custom-modal-overlay\").fadeIn();\r\n        currentInstance().selectedPane(panelName);\r\n    }\r\n\r\n\r\n    /**\r\n     * Close the panel.\r\n     */\r\n    function closePanel() {\r\n        $(\".custom-modal-overlay\").fadeOut();\r\n        $(\".panel\").removeClass(\"panel-shown\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Triger reconnect on all non-connected instances.\r\n     */\r\n    function triggerReconnectAll() {\r\n        ko.utils.arrayForEach(window.nurx.instances(), function(instance) {\r\n            instance.triggerReconnect();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Show the dialog for adding a new instance.\r\n     */\r\n    function showNewInstanceDialog() {\r\n        $('#global').addClass('modal-active');\r\n        $('#instance-create-modal').openModal(defaultModalOptions);\r\n\r\n        newInstUrl(\"localhost:\" + DEFAULT_SERVICE_PORT);\r\n        newInstUser(\"admin\");\r\n        newInstPass(\"\");\r\n        Materialize.updateTextFields();\r\n    }\r\n\r\n    /**\r\n     * Create the new instance tab.\r\n     */\r\n    function createNewInstanceTab() {\r\n        createInstance(newInstUrl(), newInstUser(), newInstPass());\r\n\r\n        selectedInstanceIdx(instances().length - 1);\r\n        closeNewInstanceModal();\r\n        resizeWindow();        \r\n    }\r\n\r\n    /**\r\n     * Close the new instance modal.\r\n     */\r\n    function closeNewInstanceModal() {\r\n        $('#instance-create-modal').closeModal(defaultModalOptions);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Show the close instance modal.\r\n     */\r\n    var closeModalInstanceId;\r\n    function showCloseInstanceModal(instanceId) {\r\n        closeModalInstanceId = instanceId;\r\n\r\n        $('#global').addClass('modal-active');\r\n        $(\"#instance-close-modal\").openModal(defaultModalOptions);\r\n    }\r\n\r\n    /**\r\n     * Handle an instance close confirmation.\r\n     */\r\n    function closeInstance() {\r\n        for(var i = 0; i < instances().length; i++) {\r\n            if(instances()[i].instanceId == closeModalInstanceId) {\r\n                instances.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(instances().length > 0 && selectedInstanceIdx() >= instances().length)\r\n            selectedInstanceIdx(instances().length - 1);\r\n\r\n        closeCloseInstanceModal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Close the close instance modal.\r\n     */\r\n    function closeCloseInstanceModal() {\r\n        $('#global').removeClass('modal-active');\r\n        $(\"#instance-close-modal\").closeModal(defaultModalOptions);\r\n    }\r\n\r\n    // Setup window events, initialize window.\r\n    $(window).resize(resizeWindow);\r\n    $(document).ready(function() {       \r\n        ko.applyBindings(vm);\r\n        resizeWindow();\r\n\r\n        $('.modal-trigger').leanModal(); \r\n    })\r\n\r\n    var vm = {    \r\n        pokedata: pokedata,\r\n\r\n        instances: instances,\r\n        selectedInstanceIdx: selectedInstanceIdx,\r\n        newInstUrl: newInstUrl,\r\n        newInstUser: newInstUser,\r\n        newInstPass: newInstPass,  \r\n        SSLCheckUrl: SSLCheckUrl,   \r\n\r\n        currentInstance: currentInstance,   \r\n\r\n        registerPanel: registerPanel,\r\n        createInstance: createInstance,\r\n        resizeWindow: resizeWindow,\r\n        openPanel: openPanel,\r\n        closePanel: closePanel,\r\n        triggerReconnectAll: triggerReconnectAll,\r\n        showNewInstanceDialog: showNewInstanceDialog,\r\n        createNewInstanceTab: createNewInstanceTab,\r\n        closeNewInstanceModal: closeNewInstanceModal,\r\n        showCloseInstanceModal: showCloseInstanceModal,\r\n        closeInstance: closeInstance,\r\n        closeCloseInstanceModal: closeCloseInstanceModal\r\n    };   \r\n    return vm;\r\n})();","$(document).ready(function() {\r\n    // Load sessions from storage.\r\n    var sessionData = window.localStorage.getItem(\"nurx-sessions\");\r\n    if(sessionData != null) {\r\n        try {\r\n            sessionData = JSON.parse(sessionData);\r\n\r\n            ko.utils.arrayForEach(sessionData, function(session) {\r\n                window.nurx.createInstance(session.wsUrl, session.wsUser, session.wsPass);\r\n            });\r\n\r\n            if (window.nurx.instances().length > 0) {\r\n                window.nurx.selectedInstanceIdx(0);\r\n                window.nurx.resizeWindow();\r\n            }\r\n        } catch (err) {\r\n            console.log(\"Error parsing previous session data: \", err)\r\n        }\r\n    }\r\n\r\n    // Save sessions every 10 seconds.\r\n    window.setInterval(function() {\r\n        var sessionSave = [];\r\n        ko.utils.arrayForEach(window.nurx.instances(), function(instance) {\r\n            sessionSave.push(instance.credentials);\r\n        });\r\n        window.localStorage.setItem(\"nurx-sessions\", JSON.stringify(sessionSave));\r\n    }, 10000);\r\n})","\r\nwindow.nurx.registerPanel(\"log\", function(nurx) {\r\n    var maxLogLevel = 15;\r\n    var logLevels = {\r\n        0: 'None',\r\n        1: 'Error',\r\n        2: 'Warning',\r\n        3: 'Pokestop',\r\n        4: 'Farming',\r\n        5: 'Sniper',\r\n        6: 'Recycling',\r\n        7: 'Berry',\r\n        8: 'Caught',\r\n        9: 'Flee',\r\n        10: 'Transfer',\r\n        11: 'Evolve',\r\n        12: 'Egg',\r\n        13: 'Update',\r\n        14: 'Info',\r\n        15: 'New',\r\n        16: 'Debug'\r\n    };\r\n\r\n    /**\r\n     * Handle logging.\r\n     */\r\n    function logMessage(message) {\r\n        // Log everything to console.\r\n        console.log(nurx.instanceId + \"> \" + message.Data.Message);\r\n\r\n        // Don't log stuff over the max log level.\r\n        if(message.Data.Level > maxLogLevel)\r\n            return;\r\n            \r\n        // Add new log entry, truncate old entries.\r\n        $(\"#\" + nurx.instanceId + \" .log-content\").append(\"<div class='log-entry log-color-\" + tr(logLevels[message.Data.Level])() + \"'>[\" + logLevels[message.Data.Level] + \"] \" + message.Data.Message + '</div>');\r\n        $(\"#\" + nurx.instanceId + \" .log-content\").css({ height: ($(\"#\" + nurx.instanceId + \" .log\").height() - 20) + \"px\" });\r\n\r\n        while($(\"#\" + nurx.instanceId + \" .log-entry\").length > 100) {\r\n            $(\"#\" + nurx.instanceId + \" .log-content\").find('.log-entry:lt(1)').remove();\r\n        }\r\n\r\n        // Auto scroll to bottom.\r\n        var height = $(\"#\" + nurx.instanceId + \" .log-content\")[0].scrollHeight;\r\n        $(\"#\" + nurx.instanceId + \" .log-content\").scrollTop(height);\r\n    }\r\n\r\n    // Setup websockets command listners.\r\n    nurx.commandListeners[\"log_message\"] = logMessage;\r\n\r\n    return {\r\n        logLevels: logLevels,                 \r\n        init: function() {}\r\n    };\r\n});","\r\nwindow.nurx.registerPanel(\"navigation\", function(nurx) {\r\n    var LOCATION_HISTORY_MAX_POINTS = 200;\r\n\r\n    var map;\r\n    var playerMarker;\r\n    var fortMarkers = [];\r\n    var encounterMarkers = [];\r\n\r\n    //var mapStyle = [{\"stylers\":[{\"hue\":\"#ff1a00\"},{\"invert_lightness\":true},{\"saturation\":-100},{\"lightness\":33},{\"gamma\":0.5}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#2D333C\"}]}];\r\n    //var mapStyle = [{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#193341\"}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#2c5a71\"}]},{\"featureType\":\"road\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#29768a\"},{\"lightness\":-37}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#406d80\"}]},{\"featureType\":\"transit\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#406d80\"}]},{\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#3e606f\"},{\"weight\":2},{\"gamma\":0.84}]},{\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#ffffff\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry\",\"stylers\":[{\"weight\":0.6},{\"color\":\"#1a3541\"}]},{\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#2c5a71\"}]}];\r\n    var mapStyle = [{\"featureType\":\"administrative\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"on\"},{\"lightness\":33}]},{\"featureType\":\"landscape\",\"elementType\":\"all\",\"stylers\":[{\"color\":\"#f2e5d4\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#c5dac6\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"labels\",\"stylers\":[{\"visibility\":\"on\"},{\"lightness\":20}]},{\"featureType\":\"road\",\"elementType\":\"all\",\"stylers\":[{\"lightness\":20}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#c5c6c6\"}]},{\"featureType\":\"road.arterial\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#e4d7c6\"}]},{\"featureType\":\"road.local\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#fbfaf7\"}]},{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#acbcc9\"}]}];\r\n\r\n\r\n    var locationHistory = [];\r\n    var locationLine;\r\n\r\n    function init() {\r\n        // Initialize the map.\r\n        var mapOptions = {\r\n            zoom:18,\r\n            center: new google.maps.LatLng(51.5073509,-0.12775829999998223),\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            styles: mapStyle,\r\n            mapTypeControl: false,\r\n            scaleControl: false,\r\n            zoomControl: false,\r\n        };\r\n        map = new google.maps.Map(document.getElementById('gmap-' + nurx.instanceId), mapOptions);\r\n\r\n        playerMarker = new google.maps.Marker({\r\n            map: map,\r\n            position: new google.maps.LatLng(51.5073509,-0.12775829999998223),\r\n            icon: \"img/marker_50.png\",\r\n            zIndex: 200\r\n        }); \r\n    }\r\n\r\n\r\n    /**\r\n     * Handle location updates.\r\n     */\r\n    function updateLocation(message) {\r\n\r\n        // Set the center and player marker.\r\n        var pos = new google.maps.LatLng(message.Data.Lat, message.Data.Lng);\r\n        map.setCenter(pos);\r\n        playerMarker.setPosition(pos);\r\n\r\n        // Setup the location history line.\r\n        locationHistory.push({ lat: message.Data.Lat, lng: message.Data.Lng });\r\n        while(locationHistory.length > LOCATION_HISTORY_MAX_POINTS) {\r\n            locationHistory.splice(0, 1);\r\n        }\r\n\r\n        if(locationLine != null)\r\n            locationLine.setMap(null);\r\n\r\n        locationLine = new google.maps.Polyline({\r\n            path: locationHistory,\r\n            geodesic: true,\r\n            strokeColor: '#5691FF',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        locationLine.setMap(map);\r\n    }\r\n\r\n    /**\r\n     * Handle loading of pokestops.\r\n     */\r\n    function loadPokestops(message) {\r\n        console.log(message);\r\n\r\n        ko.utils.arrayForEach(fortMarkers, function(item) {\r\n            item.setMap(null);\r\n        });\r\n        fortMarkers = [];\r\n\r\n        ko.utils.arrayForEach(message.Data, function(fortData) {\r\n            var fortMarker = new google.maps.Marker({\r\n                map: map,\r\n                position: new google.maps.LatLng(fortData.Latitude, fortData.Longitude),\r\n                icon: \"img/pokestop_25.png\",\r\n                zIndex: 100\r\n            });\r\n            fortMarkers.push(fortMarker);\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Handle forUsed.\r\n    */\r\n    function fortUsed(message) {\r\n        var fortPos = new google.maps.LatLng(message.Data.Latitude, message.Data.Longitude);\r\n\r\n        // Find the fort that was used.\r\n        var matchFort;\r\n        for (var i = 0; i < fortMarkers.length; i++) {            \r\n            if (fortPos.equals(fortMarkers[i].position)){\r\n                matchFort = fortMarkers[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (matchFort != null) {\r\n            matchFort.setIcon(\"img/pokestop_50.png\");\r\n            window.setTimeout(function() { matchFort.setIcon(\"img/pokestop_25.png\"); }, 1000 * 60 * 5);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Show an encounter on the map.     \r\n     */\r\n    function showEncounter(encounter) {\r\n        /*var pokeMarker = new google.maps.Marker({\r\n            map: map,\r\n            position: new google.maps.LatLng(encounter.Lat, encounter.Lng),\r\n            icon: \"img/pokemon/\" + encounter.PokemonData.PokemonId + \".png\",\r\n            zIndex: 100\r\n        });*/\r\n\r\n        var pokeMarker = new EncounterMarker(\r\n            new google.maps.LatLng(encounter.Lat, encounter.Lng), \r\n            map,\r\n            {\r\n                PokemonId:  encounter.PokemonData.PokemonId\r\n            }\r\n        );\r\n\r\n        encounterMarkers.push(pokeMarker);\r\n        setTimeout(function() {\r\n            console.log(\"removing pokemon marker\");\r\n\r\n            try {\r\n                for(var i = 0; i < encounterMarkers.length; i++) {\r\n                    if(encounterMarkers[i] == pokeMarker) {\r\n                        encounterMarkers.splice(i, 1);\r\n                        return;\r\n                    }                    \r\n                }\r\n                \r\n                pokeMarker.remove();\r\n                pokeMarker.setMap(null);\r\n            } catch(err) {\r\n                console.log(\"Error removing encounter marker: \", err);\r\n            }\r\n        }, 1000 * 60 * 3);\r\n    }\r\n\r\n    /**\r\n     * Handle nearby encounters.\r\n     */\r\n    function encounterNearby(message) { \r\n        console.log(\"Nearby encounter: \", message);\r\n\r\n        showEncounter({\r\n            PokemonData: message.Data.PokemonData,\r\n            Lat: message.Data.Latitude,\r\n            Lng: message.Data.Longitude,\r\n            SpawnId: message.Data.SpawnPointId,\r\n            EncounterId: message.Data.EncounterId\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Handle lure encounters.\r\n     */\r\n    function encounterLure(message) { }\r\n\r\n\r\n    /**\r\n     * Handle incense encounters.\r\n     */\r\n    function encounterIncense(message) { }\r\n\r\n\r\n    // Setup websockets command listners.\r\n    nurx.commandListeners[\"fortused\"] = fortUsed;\r\n    nurx.commandListeners[\"update_location\"] = updateLocation;\r\n    nurx.commandListeners[\"pokestops\"] = loadPokestops;\r\n    nurx.commandListeners[\"encounter_nearby\"] = encounterNearby;\r\n    nurx.commandListeners[\"encounter_lure\"] = encounterLure;\r\n    nurx.commandListeners[\"encounter_incense\"] = encounterIncense;\r\n    \r\n\r\n    return {   \r\n        init: init\r\n    };\r\n});","\r\nwindow.nurx.registerPanel(\"pokemon\", function(nurx) {\r\n\r\n    // Observables.\r\n    var pokemonListData = ko.observableArray([]);\r\n    var pokemonSortField = ko.observable(\"Perfection\");\r\n    var sortAscending = ko.observable(false);\r\n    \r\n\r\n    // Computeds.\r\n\r\n    /**\r\n     * Return a list of sorted pokemon.\r\n     */\r\n    var pokemonListSorted = ko.computed(function() {\r\n        var clonedData = JSON.parse(JSON.stringify(pokemonListData()));\r\n\r\n        // Strip out all null pokemon entries since they're messing stuff up.\r\n        var containsNullPoke = true;\r\n        while(containsNullPoke) {\r\n            containsNullPoke = false;\r\n            for(var i = 0; i < clonedData.length; i++) {\r\n                if(clonedData[i] == null) {\r\n                    clonedData.splice(i, 1);\r\n                    containsNullPoke = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Setup comparator values.\r\n        var compLHS = sortAscending() ? 1 : -1;\r\n        var compRHS = sortAscending() ? -1 : 1;\r\n\r\n        clonedData.sort(function(a, b) {\r\n            if(pokemonSortField() == \"Perfection\") {              \r\n                if(a.Perfection == b.Perfection)\r\n                    return 0;\r\n                else\r\n                    return a.Perfection > b.Perfection ? compLHS : compRHS;\r\n            }\r\n        \r\n            if(a.Base[pokemonSortField()] == b.Base[pokemonSortField()])\r\n                return 0;\r\n            else\r\n                return a.Base[pokemonSortField()] > b.Base[pokemonSortField()] ? compLHS : compRHS;\r\n        });\r\n        \r\n        return clonedData;\r\n    });\r\n\r\n\r\n    /**\r\n     * Get a nicely formatted name for the sort field.\r\n     */\r\n    var sortFieldDescription = ko.computed(function() {\r\n        switch(pokemonSortField()) {\r\n            case \"Perfection\": return tr(\"IV\")();      \r\n            case \"Cp\": return tr(\"CP\")();\r\n            case \"Hp\": return tr(\"HP\")(); \r\n            case \"PokemonId\": return tr(\"Number\")();     \r\n            case \"CreationTimeMs\": return tr(\"Recent\")();\r\n        }\r\n\r\n        return pokemonSortField();\r\n    });\r\n\r\n\r\n    // Functions.\r\n\r\n    /**\r\n     * Handle websockets data update.\r\n     */\r\n    function loadPokemonList(message) {\r\n        pokemonListData(message.Data); \r\n    }\r\n\r\n\r\n    /**\r\n     * Change the sorting of pokemon.\r\n     */\r\n    function sortBy(field) {\r\n        // If sorting by same field, flip ascending/descending.\r\n        if(pokemonSortField() == field)\r\n            sortAscending(!sortAscending());\r\n        else {\r\n            pokemonSortField(field);\r\n            sortAscending(true);\r\n        }        \r\n    }\r\n\r\n\r\n    // Setup websockets command listners.\r\n    nurx.commandListeners[\"pokemonlist\"] = loadPokemonList;\r\n\r\n    return {\r\n        // Observables.\r\n        pokemonListData: pokemonListData,\r\n        pokemonSortField: pokemonSortField,\r\n\r\n        // Computeds.\r\n        pokemonListSorted: pokemonListSorted,\r\n        sortFieldDescription: sortFieldDescription,\r\n        sortAscending: sortAscending,\r\n\r\n        // Functions.\r\n        sortBy: sortBy,\r\n        init: function() {}\r\n    };\r\n});","window.nurx.registerPanel(\"inventory\", function(nurx) {\r\n\r\n    // Observables.\r\n    var inventoryListData = ko.observableArray([]);\r\n    \r\n    var items = ko.computed(function() {\r\n        var clonedData = JSON.parse(JSON.stringify(inventoryListData()));\r\n        \r\n        var containsNullPoke = true;\r\n        while(containsNullPoke) {\r\n            containsNullPoke = false;\r\n            for(var i = 0; i < clonedData.length; i++) {\r\n                if(clonedData[i] == null) {\r\n                    clonedData.splice(i, 1);\r\n                    containsNullPoke = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return clonedData;\r\n    });\r\n    // Computeds.\r\n\r\n    // Functions.\r\n\r\n    /**\r\n     * Handle websockets data update.\r\n     */     \r\n    function loadInventoryList(message) {      \r\n        inventoryListData(message.Data); \r\n    }\r\n\r\n    // Setup websockets command listners.\r\n    nurx.commandListeners[\"inventorylist\"] = loadInventoryList;\r\n\r\n    return {\r\n        // Observables.\r\n        inventoryListData: inventoryListData,\r\n        items: items,\r\n\r\n        // Functions.\r\n        init: function() {}\r\n    };\r\n});"],"sourceRoot":"/source/"}